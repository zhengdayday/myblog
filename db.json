{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/desktop.ini","path":"desktop.ini","modified":1,"renderable":0},{"_id":"source/img/react-coding-standards.png","path":"img/react-coding-standards.png","modified":1,"renderable":0},{"_id":"themes/one/source/012cf6a10129e2275d79d6adac7f3b02.woff","path":"012cf6a10129e2275d79d6adac7f3b02.woff","modified":1,"renderable":1},{"_id":"themes/one/source/570eb83859dc23dd0eec423a49e147fe.woff2","path":"570eb83859dc23dd0eec423a49e147fe.woff2","modified":1,"renderable":1},{"_id":"themes/one/source/index.html","path":"index.html","modified":1,"renderable":1},{"_id":"themes/one/source/offline.html","path":"offline.html","modified":1,"renderable":1},{"_id":"source/img/right_pic.jpg","path":"img/right_pic.jpg","modified":1,"renderable":0},{"_id":"themes/one/source/offline.svg","path":"offline.svg","modified":1,"renderable":1},{"_id":"themes/one/source/a37b0c01c0baf1888ca812cc0508f6e2.ttf","path":"a37b0c01c0baf1888ca812cc0508f6e2.ttf","modified":1,"renderable":1},{"_id":"source/img/Functional-programming/cover.jpg","path":"img/Functional-programming/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/azusa/azusa.jpg","path":"img/azusa/azusa.jpg","modified":1,"renderable":0},{"_id":"source/img/dokku-get-start/1.png","path":"img/dokku-get-start/1.png","modified":1,"renderable":0},{"_id":"source/img/dokku-get-start/2.png","path":"img/dokku-get-start/2.png","modified":1,"renderable":0},{"_id":"source/img/dokku-get-start/cover.jpg","path":"img/dokku-get-start/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/drawerCover.jpg","path":"img/drawerCover.jpg","modified":1,"renderable":0},{"_id":"source/img/hexo的live2d插件/live2d z16.jpg","path":"img/hexo的live2d插件/live2d z16.jpg","modified":1,"renderable":0},{"_id":"source/img/hexo的live2d插件/z16.jpg","path":"img/hexo的live2d插件/z16.jpg","modified":1,"renderable":0},{"_id":"source/img/home.jpg","path":"img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/icon/github.svg","path":"img/icon/github.svg","modified":1,"renderable":0},{"_id":"source/img/icon/QQ.svg","path":"img/icon/QQ.svg","modified":1,"renderable":0},{"_id":"source/img/one主题/截图.png","path":"img/one主题/截图.png","modified":1,"renderable":0},{"_id":"source/img/one主题/截图.jpg","path":"img/one主题/截图.jpg","modified":1,"renderable":0},{"_id":"source/img/one主题/截图3.jpg","path":"img/one主题/截图3.jpg","modified":1,"renderable":0},{"_id":"source/img/one主题/截图4.jpg","path":"img/one主题/截图4.jpg","modified":1,"renderable":0},{"_id":"source/img/one主题/截图4.png","path":"img/one主题/截图4.png","modified":1,"renderable":0},{"_id":"source/img/one主题/截图5.jpg","path":"img/one主题/截图5.jpg","modified":1,"renderable":0},{"_id":"source/img/表情/喷.jpg","path":"img/表情/喷.jpg","modified":1,"renderable":0},{"_id":"source/img/通过css 3d transform让页面变3d/cover.jpg","path":"img/通过css 3d transform让页面变3d/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/表情/喷.png","path":"img/表情/喷.png","modified":1,"renderable":0},{"_id":"themes/one/source/52342c4f7685bd4be2f462665845d4e9.js","path":"52342c4f7685bd4be2f462665845d4e9.js","modified":1,"renderable":1},{"_id":"themes/one/source/embed.js","path":"embed.js","modified":1,"renderable":1},{"_id":"themes/one/source/e79bfd88537def476913f3ed52f4f4b3.eot","path":"e79bfd88537def476913f3ed52f4f4b3.eot","modified":1,"renderable":1},{"_id":"source/img/hexo的live2d插件/z16.png","path":"img/hexo的live2d插件/z16.png","modified":1,"renderable":0},{"_id":"source/img/one主题/截图2.jpg","path":"img/one主题/截图2.jpg","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/cover.jpg","path":"img/web动画框架的初步设计/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/二次元/下雨.jpg","path":"img/二次元/下雨.jpg","modified":1,"renderable":0},{"_id":"source/img/二次元/格式工厂真正的亚瑟王.jpg","path":"img/二次元/格式工厂真正的亚瑟王.jpg","modified":1,"renderable":0},{"_id":"source/img/关于本站/cover.jpg","path":"img/关于本站/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/azusa/cover.jpg","path":"img/azusa/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/one主题/cover.jpg","path":"img/one主题/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/float.png","path":"img/web动画框架的初步设计/float.png","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/key.png","path":"img/web动画框架的初步设计/key.png","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/垃圾2.png","path":"img/web动画框架的初步设计/垃圾2.png","modified":1,"renderable":0},{"_id":"source/img/二次元/源氏半藏.jpg","path":"img/二次元/源氏半藏.jpg","modified":1,"renderable":0},{"_id":"source/img/one主题/截图3.png","path":"img/one主题/截图3.png","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/分割.png","path":"img/web动画框架的初步设计/分割.png","modified":1,"renderable":0},{"_id":"source/img/Neo4j/cover.jpg","path":"img/Neo4j/cover.jpg","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/垃圾1.png","path":"img/web动画框架的初步设计/垃圾1.png","modified":1,"renderable":0},{"_id":"source/img/one主题/康娜.gif","path":"img/one主题/康娜.gif","modified":1,"renderable":0},{"_id":"source/img/one主题/截图5.png","path":"img/one主题/截图5.png","modified":1,"renderable":0},{"_id":"source/img/hexo的live2d插件/live2d z16.png","path":"img/hexo的live2d插件/live2d z16.png","modified":1,"renderable":0},{"_id":"themes/one/source/bundle.js","path":"bundle.js","modified":1,"renderable":1},{"_id":"themes/one/source/vendor.js","path":"vendor.js","modified":1,"renderable":1},{"_id":"source/img/live2d/wanko.gif","path":"img/live2d/wanko.gif","modified":1,"renderable":0},{"_id":"source/img/二次元/真正的亚瑟王.jpg","path":"img/二次元/真正的亚瑟王.jpg","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/cover.big.jpg","path":"img/web动画框架的初步设计/cover.big.jpg","modified":1,"renderable":0},{"_id":"source/img/one主题/截图2.png","path":"img/one主题/截图2.png","modified":1,"renderable":0},{"_id":"source/img/live2d/hijiki.gif","path":"img/live2d/hijiki.gif","modified":1,"renderable":0},{"_id":"source/img/right_pic2.jpg","path":"img/right_pic2.jpg","modified":1,"renderable":0},{"_id":"source/img/live2d/tororo.gif","path":"img/live2d/tororo.gif","modified":1,"renderable":0},{"_id":"source/img/one主题/cover.png","path":"img/one主题/cover.png","modified":1,"renderable":0},{"_id":"source/img/Neo4j/cover.png","path":"img/Neo4j/cover.png","modified":1,"renderable":0},{"_id":"source/img/二次元/下雨.png","path":"img/二次元/下雨.png","modified":1,"renderable":0},{"_id":"source/img/关于本站/cover.png","path":"img/关于本站/cover.png","modified":1,"renderable":0},{"_id":"source/img/right_pic.png","path":"img/right_pic.png","modified":1,"renderable":0},{"_id":"source/img/home.png","path":"img/home.png","modified":1,"renderable":0},{"_id":"source/img/live2d/koharu.gif","path":"img/live2d/koharu.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/Epsilon2.1.gif","path":"img/live2d/Epsilon2.1.gif","modified":1,"renderable":0},{"_id":"source/img/drawerCover.png","path":"img/drawerCover.png","modified":1,"renderable":0},{"_id":"source/img/live2d/tsumiki.gif","path":"img/live2d/tsumiki.gif","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/效果图.gif","path":"img/web动画框架的初步设计/效果图.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/haruto.gif","path":"img/live2d/haruto.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/ni-j.gif","path":"img/live2d/ni-j.gif","modified":1,"renderable":0},{"_id":"source/img/azusa/example.gif","path":"img/azusa/example.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/nito.gif","path":"img/live2d/nito.gif","modified":1,"renderable":0},{"_id":"source/img/web动画框架的初步设计/炫酷ui.gif","path":"img/web动画框架的初步设计/炫酷ui.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/z16.gif","path":"img/live2d/z16.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/haru.gif","path":"img/live2d/haru.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/Unitychan.gif","path":"img/live2d/Unitychan.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/nico.gif","path":"img/live2d/nico.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/Gantzert_Felixander.gif","path":"img/live2d/Gantzert_Felixander.gif","modified":1,"renderable":0},{"_id":"themes/one/source/bundle.js.map","path":"bundle.js.map","modified":1,"renderable":1},{"_id":"source/img/live2d/nipsilon.gif","path":"img/live2d/nipsilon.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/shizuku.gif","path":"img/live2d/shizuku.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/hibiki.gif","path":"img/live2d/hibiki.gif","modified":1,"renderable":0},{"_id":"source/img/二次元/原图源氏半藏.jpg","path":"img/二次元/原图源氏半藏.jpg","modified":1,"renderable":0},{"_id":"themes/one/source/vendor.js.map","path":"vendor.js.map","modified":1,"renderable":1},{"_id":"source/img/live2d/nietzche.gif","path":"img/live2d/nietzche.gif","modified":1,"renderable":0},{"_id":"source/img/live2d/miku.gif","path":"img/live2d/miku.gif","modified":1,"renderable":0}],"Cache":[{"_id":"source/desktop.ini","hash":"84a14b9ed14117ce4feb8a6e1cef9adcfeced867","modified":1497572783000},{"_id":"source/sw.js","hash":"3ff33e9f71af5d17b5a7aed646c52fbd501fb88d","modified":1497572783000},{"_id":"source/关于我.md","hash":"4fa4eb4fc414608fd5751c5e46cdb5bbbc49d0c2","modified":1539760268505},{"_id":"source/关于本站.md","hash":"fdd0817e7d82d1f2553837a2c8a5a1f471ed9597","modified":1539760268498},{"_id":"source/_posts/Neo4j基础入门.md","hash":"ffeec0be6622f8488ac462f99d9c19b7de8dd36d","modified":1539846487198},{"_id":"source/_posts/Neo4j教程.md","hash":"fccae94200cb15cdaa361206b48e9fa878e9e59b","modified":1539846379134},{"_id":"source/footer/live2d.html","hash":"927cd7b5e276eedecf4b899e572c76d1b0f8bd1d","modified":1539769548246},{"_id":"source/_posts/Neo4j概述.md","hash":"3d64687da476df2b9695e2a16a5ca187a1d90da9","modified":1539846405404},{"_id":"source/head/piwik.html","hash":"08a68dba86bae2e3c36006ed0ee718d0d969a0d1","modified":1539831967176},{"_id":"source/img/react-coding-standards.png","hash":"686f91af6806fc58c19abbda12d4acffd2f1f511","modified":1497572783000},{"_id":"themes/one/_config.yml","hash":"fd2c712b738ce36190b0a9c7a07d537f054f3b8f","modified":1539752757391},{"_id":"themes/one/_config.yml.example","hash":"29aa180ffb2f6f8e677777ef36a354dafbc76c6d","modified":1539752757353},{"_id":"themes/one/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1497572783000},{"_id":"themes/one/scripts/index.js","hash":"c63ab8162634ede968455fa51c68b2b6ef6cd55e","modified":1497572783000},{"_id":"themes/one/source/012cf6a10129e2275d79d6adac7f3b02.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1539824834004},{"_id":"themes/one/source/570eb83859dc23dd0eec423a49e147fe.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1539824834042},{"_id":"themes/one/source/index.html","hash":"add1acb9ba3df604955502ed6ff844356d94f54e","modified":1539824834965},{"_id":"themes/one/source/offline.html","hash":"d1ffda5dc9903c9a42d66636aea9405e311c6f85","modified":1497572783000},{"_id":"source/img/right_pic.jpg","hash":"8d00ccf57f3f34bf19c842e3e868881362d5c6fe","modified":1497572783000},{"_id":"themes/one/source/offline.svg","hash":"397df2cca991edc8b6d18a2746013a8c576b52c9","modified":1497572783000},{"_id":"themes/one/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497572783000},{"_id":"themes/one/source/a37b0c01c0baf1888ca812cc0508f6e2.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1539824834184},{"_id":"source/img/Functional-programming/cover.jpg","hash":"b3f0f2e69876e773cba6f80cbe8411c67b5d405b","modified":1497572783000},{"_id":"source/img/azusa/azusa.jpg","hash":"595290f7592357cb0338960d783873d172ca1aad","modified":1497572783000},{"_id":"source/img/dokku-get-start/1.png","hash":"8e1136c9f0a1d11a9b954ecc2e154f4c7a13d09e","modified":1497572783000},{"_id":"source/img/dokku-get-start/2.png","hash":"8e517512b3e453296c6817fa80d5163ef75c9b49","modified":1497572783000},{"_id":"source/img/dokku-get-start/cover.jpg","hash":"522b6a97b21098c627564af615ec29ce7f499b37","modified":1497572783000},{"_id":"source/img/drawerCover.jpg","hash":"9ef850b9729d445191c51d1dcabe3d2062ced771","modified":1497572783000},{"_id":"source/img/hexo的live2d插件/live2d z16.jpg","hash":"eb603bdafa02648c840be48a34e9724142bc2e58","modified":1497572783000},{"_id":"source/img/hexo的live2d插件/z16.jpg","hash":"29a47cd58deeb7440d88fa9c4b9073550568d5c6","modified":1497572783000},{"_id":"source/img/home.jpg","hash":"fd1084e4b34a7616bf2880e0a17a0312a8809418","modified":1497572783000},{"_id":"source/img/icon/github.svg","hash":"cce84a7087ca4aaada50b21e632d0c31f8780fc1","modified":1497572783000},{"_id":"source/img/icon/QQ.svg","hash":"37cb4f621fc0e5aff01f6ff1fd54607bdbbf0a73","modified":1497572783000},{"_id":"source/img/one主题/截图.png","hash":"0e8f391132b0a8c34f02937e05e09b65b68c4e4e","modified":1497572783000},{"_id":"source/img/one主题/截图.jpg","hash":"78bfeae67953a1bff4dbbe114f07ba497567e279","modified":1497572783000},{"_id":"source/img/one主题/截图3.jpg","hash":"c2fac04a6827ecbfbc4ffde4efaead6013df5381","modified":1497572783000},{"_id":"source/img/one主题/截图4.jpg","hash":"e007541c068eb3a05e863a09705d58f6794097c6","modified":1497572783000},{"_id":"source/img/one主题/截图4.png","hash":"87baa23fa7708bbac08c5928264c6d3c62b5aee7","modified":1497572783000},{"_id":"source/img/one主题/截图5.jpg","hash":"8991a3cfd353096df713885cdb1d153010f97645","modified":1497572783000},{"_id":"source/img/表情/喷.jpg","hash":"15b8b65ae7336fd7a32361810b257742fddd04b3","modified":1497572783000},{"_id":"source/img/通过css 3d transform让页面变3d/cover.jpg","hash":"c897ed40e24dfb9f67df7137a308e0cb49c8e8c3","modified":1497572783000},{"_id":"source/img/表情/喷.png","hash":"0369afcfa50a8ed42759b8165a56bcec0e07e4f4","modified":1497572783000},{"_id":"themes/one/scripts/lib/css_lsload.js","hash":"b5e624154c0a36914454eb129549d92fe22a6201","modified":1497572783000},{"_id":"themes/one/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1497572783000},{"_id":"themes/one/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1497572783000},{"_id":"themes/one/scripts/lib/js_lsload.js","hash":"944559278a47c5b912932db08d1e1d831e452776","modified":1497572783000},{"_id":"themes/one/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1497572783000},{"_id":"themes/one/scripts/lib/restful.js","hash":"bb02f074e56b4762c709b85959ad76d12888976d","modified":1497572783000},{"_id":"themes/one/source/52342c4f7685bd4be2f462665845d4e9.js","hash":"ceac2f8363baa1ddb8853d3bcd3c3f3c6d12326a","modified":1539824834142},{"_id":"themes/one/scripts/lib/router-add-one.js","hash":"afa1cc03ea12c1453c6fa4132e163e6cfd030821","modified":1497572783000},{"_id":"themes/one/source/embed.js","hash":"3ac650967aa0f74ec4d7ef5d8d168f7f199e31af","modified":1539824834898},{"_id":"themes/one/source/e79bfd88537def476913f3ed52f4f4b3.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1539824834801},{"_id":"source/img/hexo的live2d插件/z16.png","hash":"bb8c9d2160b79cc1af13fe32fb7969f1f8e073bd","modified":1497572783000},{"_id":"source/img/one主题/截图2.jpg","hash":"af297b2794e654bbee448574ec1b0f0e9e127e5a","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/cover.jpg","hash":"d61bc2568c7e72d93cda8f5c4f7b7bd6cfaeefd7","modified":1497572783000},{"_id":"source/img/二次元/下雨.jpg","hash":"c0b0b1bf351b27f3a97e0461ac9dc91fe3159ea1","modified":1497572783000},{"_id":"source/img/二次元/格式工厂真正的亚瑟王.jpg","hash":"84ff580614d8a3ffae57feac069f76af0faa9872","modified":1497572783000},{"_id":"source/img/关于本站/cover.jpg","hash":"83e6a07b3564f4a7b7d707ee9a510697450770fc","modified":1497572783000},{"_id":"source/img/azusa/cover.jpg","hash":"a6e869aa54fa6a0c704e88d3f612f1a03e8f712c","modified":1497572783000},{"_id":"source/img/one主题/cover.jpg","hash":"dfc5dac333af983b9c63211a9f918aac36d13be4","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/float.png","hash":"d25b76489c5db236fe4562d88308a3b3ba1cd8b1","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/key.png","hash":"5716b5e08413fbca2419c114377fa1625cdaaebb","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/垃圾2.png","hash":"361be82549bfe1c357dbf6b9160392eb3173f492","modified":1497572783000},{"_id":"source/img/二次元/源氏半藏.jpg","hash":"d7949e17cd93949f42f7a6b852c3f97c2afc46dd","modified":1497572783000},{"_id":"themes/one/layout/layout.ejs","hash":"885573174ff774fe1cb90cdf0860690f9b6b74c5","modified":1497572783000},{"_id":"themes/one/layout/index.ejs","hash":"885573174ff774fe1cb90cdf0860690f9b6b74c5","modified":1497572783000},{"_id":"source/img/one主题/截图3.png","hash":"c170da93e173ab747ce0c0bbee9ea8cf2a5b44e8","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/分割.png","hash":"8523fcb0a4212fc7651e784662b2a654009d5410","modified":1497572783000},{"_id":"source/img/Neo4j/cover.jpg","hash":"fc3076b4e1b4898b963c5a3f073a78cc82acb271","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/垃圾1.png","hash":"ea4061c46eb9f85ea0fa2b1a1c22eecd240dc466","modified":1497572783000},{"_id":"source/img/one主题/康娜.gif","hash":"fcc226f86dc6a619ba491fb72a5fc98cb320d575","modified":1497572783000},{"_id":"source/img/one主题/截图5.png","hash":"b08f6623c3c1e1250973b8697d29747643436c40","modified":1497572783000},{"_id":"source/img/hexo的live2d插件/live2d z16.png","hash":"a4eae8218e8be564416ea8f46ea26a05272fe753","modified":1497572783000},{"_id":"themes/one/source/bundle.js","hash":"749320bddaa0b91bfce2f2b94f92bf5a9e77942d","modified":1539825361656},{"_id":"themes/one/source/vendor.js","hash":"e0b464cc7951b731a635e80553b0e1829d305c2e","modified":1539824835388},{"_id":"source/img/live2d/wanko.gif","hash":"b5a38911798dc9ce3bd858f5f401566048c5dbf4","modified":1497572783000},{"_id":"source/img/二次元/真正的亚瑟王.jpg","hash":"7d9942118355ded966d7e23add1ca4323811f22b","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/cover.big.jpg","hash":"4daa47826ec6676a39257bfa79dbb11462ee84d6","modified":1497572783000},{"_id":"source/img/one主题/截图2.png","hash":"7ece58f2175bd2eb638ab4f8ca564f4ac51756b3","modified":1497572783000},{"_id":"source/img/live2d/hijiki.gif","hash":"b276efb514bc45184a9fd972a6111dd9aec6a676","modified":1497572783000},{"_id":"source/img/right_pic2.jpg","hash":"468916e277771830f6295d145032f716c8c7290f","modified":1497572783000},{"_id":"source/img/live2d/tororo.gif","hash":"d3a4bec80c695e24f2fc844cdb374cefb508fe3e","modified":1497572783000},{"_id":"source/img/one主题/cover.png","hash":"ae339cd639b35a566acdc8328e387e89380e24ce","modified":1497572783000},{"_id":"source/img/Neo4j/cover.png","hash":"0965bb4e7fde60e9565239c7f62dc504973514c1","modified":1497572783000},{"_id":"source/img/二次元/下雨.png","hash":"6b3ef0949739268fd77ee24b0aef7f92508c19f1","modified":1497572783000},{"_id":"source/img/关于本站/cover.png","hash":"79f8fc4a3f628abae06efc2e6a42f220f7175825","modified":1497572783000},{"_id":"source/img/right_pic.png","hash":"454262929adb7396516c5471991c30910aea81f4","modified":1497572783000},{"_id":"source/img/home.png","hash":"301e58cf6064b9590827eebfa0685d2ec7e08f64","modified":1497572783000},{"_id":"source/img/live2d/koharu.gif","hash":"8485ac75ec4676284d269f8dcdc45bddadbb5f6d","modified":1497572783000},{"_id":"source/img/live2d/Epsilon2.1.gif","hash":"6d01fa0ecbc2dc4dc94684d5f0f00c6837206453","modified":1497572783000},{"_id":"source/img/drawerCover.png","hash":"9c15c87b7ad687d0025fd56916801322351fd1c7","modified":1497572783000},{"_id":"source/img/live2d/tsumiki.gif","hash":"422ca75a1ad9788c56735b7cd3b8bd2b755deee8","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/效果图.gif","hash":"28f742a7b14c655c174d15531ef84105a4212036","modified":1497572783000},{"_id":"source/img/live2d/haruto.gif","hash":"ed739c3ccf413d2b8af8cc46ee191eef10adffdb","modified":1497572783000},{"_id":"source/img/live2d/ni-j.gif","hash":"c94f419e34d28a0e7e9b91d830050ffd3391a98d","modified":1497572783000},{"_id":"source/img/azusa/example.gif","hash":"b77f31e7a26b3c44ce4222f1c02a2dab448fe1e1","modified":1497572783000},{"_id":"source/img/live2d/nito.gif","hash":"a46ed7dc985168dc55c05537877ca32deeaac382","modified":1497572783000},{"_id":"source/img/web动画框架的初步设计/炫酷ui.gif","hash":"fc64912c24ef3db59e2203202234f46a606acbcc","modified":1497572783000},{"_id":"source/img/live2d/z16.gif","hash":"1effb55b48a8531348e083d2c501a193940f4334","modified":1497572783000},{"_id":"source/img/live2d/haru.gif","hash":"f7d81d74d1bad0a747e887f99a53712d30325d30","modified":1497572783000},{"_id":"source/img/live2d/Unitychan.gif","hash":"4295b1714e5a08e9dfa1c6d7a480a75ecc7e46fe","modified":1497572783000},{"_id":"source/img/live2d/nico.gif","hash":"793d1619884ba8300d956bbd71f7f9db70505513","modified":1497572783000},{"_id":"source/img/live2d/Gantzert_Felixander.gif","hash":"9c69e5fb6ce6ba41cc374eaf1cc36c2d95444296","modified":1497572783000},{"_id":"themes/one/source/bundle.js.map","hash":"433753b9b460ea8422b7f97eefc03d29fd0eb944","modified":1539824834762},{"_id":"source/img/live2d/nipsilon.gif","hash":"50abaf18f0a03bc93c6aabadc8be73c9e2976b71","modified":1497572783000},{"_id":"source/img/live2d/shizuku.gif","hash":"a744acb89dc1a282af819e0fcbbbe8a782f8f116","modified":1497572783000},{"_id":"source/img/live2d/hibiki.gif","hash":"a2b5f7016155736bbaafa9715a47eaa4924e5057","modified":1497572783000},{"_id":"source/img/二次元/原图源氏半藏.jpg","hash":"35a824adc590a09080380548885d71fadaca6701","modified":1497572783000},{"_id":"themes/one/source/vendor.js.map","hash":"47795ec038673ca72dbd3dd312eefef68677807d","modified":1539824835572},{"_id":"source/img/live2d/nietzche.gif","hash":"198ae4cd1a4cd24c7b8f9e86498bc9ccb45264ae","modified":1497572783000},{"_id":"source/img/live2d/miku.gif","hash":"162ec4475f47e728ee85d929460f5b59bf1953d2","modified":1497572783000}],"Category":[{"name":"Neo4j","_id":"cjne8ulpa0007ggvjt2pf2tcl"}],"Data":[],"Page":[{"_content":"'use strict';\n\nconst version = 'v20170408';\nconst __DEVELOPMENT__ = false;\nconst __DEBUG__ = false;\nconst offlineResources = [\n  '/',\n  '/offline.html',\n  '/offline.svg'\n];\n\nconst matchFetch = [\n  /https?:\\/\\/huaji8.top\\//\n];\n\n\n//////////\n// Install\n//////////\nfunction onInstall(event) {\n  log('install event in progress.');\n\n  event.waitUntil(updateStaticCache());\n}\n\nfunction updateStaticCache() {\n  return caches\n    .open(cacheKey('offline'))\n    .then((cache) => {\n      return cache.addAll(offlineResources);\n    })\n    .then(() => {\n      log('installation complete!');\n    });\n}\n\n////////\n// Fetch\n////////\nfunction onFetch(event) {\n  const request = event.request;\n\n  if (shouldAlwaysFetch(request)) {\n    event.respondWith(networkedOrOffline(request));\n    return;\n  }\n\n  if (shouldFetchAndCache(request)) {\n    event.respondWith(networkedOrCached(request));\n    return;\n  }\n\n  event.respondWith(cachedOrNetworked(request));\n}\n\nfunction networkedOrCached(request) {\n  return networkedAndCache(request)\n    .catch(() => { return cachedOrOffline(request) });\n}\n\n// Stash response in cache as side-effect of network request\nfunction networkedAndCache(request) {\n  return fetch(request)\n    .then((response) => {\n      var copy = response.clone();\n      caches.open(cacheKey('resources'))\n        .then((cache) => {\n          cache.put(request, copy);\n        });\n\n      log(\"(network: cache write)\", request.method, request.url);\n      return response;\n    });\n}\n\nfunction cachedOrNetworked(request) {\n  return caches.match(request)\n    .then((response) => {\n      log(response ? '(cached)' : '(network: cache miss)', request.method, request.url);\n      return response ||\n        networkedAndCache(request)\n          .catch(() => { return offlineResponse(request) });\n    });\n}\n\nfunction networkedOrOffline(request) {\n  return fetch(request)\n    .then((response) => {\n      log('(network)', request.method, request.url);\n      return response;\n    })\n    .catch(() => {\n      return offlineResponse(request);\n    });\n}\n\nfunction cachedOrOffline(request) {\n  return caches\n    .match(request)\n    .then((response) => {\n      return response || offlineResponse(request);\n    });\n}\n\nfunction offlineResponse(request) {\n  log('(offline)', request.method, request.url);\n  if (request.url.match(/\\.(jpg|png|gif|svg|jpeg)(\\?.*)?$/)) {\n    return caches.match('/offline.svg');\n  } else {\n    return caches.match('/offline.html');\n  }\n}\n\n///////////\n// Activate\n///////////\nfunction onActivate(event) {\n  log('activate event in progress.');\n  event.waitUntil(removeOldCache());\n}\n\nfunction removeOldCache() {\n  return caches\n    .keys()\n    .then((keys) => {\n      return Promise.all( // We return a promise that settles when all outdated caches are deleted.\n        keys\n         .filter((key) => {\n           return !key.startsWith(version); // Filter by keys that don't start with the latest version prefix.\n         })\n         .map((key) => {\n           return caches.delete(key); // Return a promise that's fulfilled when each outdated cache is deleted.\n         })\n      );\n    })\n    .then(() => {\n      log('removeOldCache completed.');\n    });\n}\n\nfunction cacheKey() {\n  return [version, ...arguments].join(':');\n}\n\nfunction log() {\n  if (developmentMode()) {\n    console.log(\"SW:\", ...arguments);\n  }\n}\n\nfunction shouldAlwaysFetch(request) {\n  return __DEVELOPMENT__ ||\n    request.method !== 'GET' ||\n      !matchFetch.some(regex => request.url.match(regex));\n}\n\nfunction shouldFetchAndCache(request) {\n  return ~request.headers.get('Accept').indexOf('text/html');\n}\n\nfunction developmentMode() {\n  return __DEVELOPMENT__ || __DEBUG__;\n}\n\nlog(\"Hello from ServiceWorker land!\", version);\n\nself.addEventListener('install', onInstall);\n\nself.addEventListener('fetch', onFetch);\n\nself.addEventListener(\"activate\", onActivate);\n","source":"sw.js","raw":"'use strict';\n\nconst version = 'v20170408';\nconst __DEVELOPMENT__ = false;\nconst __DEBUG__ = false;\nconst offlineResources = [\n  '/',\n  '/offline.html',\n  '/offline.svg'\n];\n\nconst matchFetch = [\n  /https?:\\/\\/huaji8.top\\//\n];\n\n\n//////////\n// Install\n//////////\nfunction onInstall(event) {\n  log('install event in progress.');\n\n  event.waitUntil(updateStaticCache());\n}\n\nfunction updateStaticCache() {\n  return caches\n    .open(cacheKey('offline'))\n    .then((cache) => {\n      return cache.addAll(offlineResources);\n    })\n    .then(() => {\n      log('installation complete!');\n    });\n}\n\n////////\n// Fetch\n////////\nfunction onFetch(event) {\n  const request = event.request;\n\n  if (shouldAlwaysFetch(request)) {\n    event.respondWith(networkedOrOffline(request));\n    return;\n  }\n\n  if (shouldFetchAndCache(request)) {\n    event.respondWith(networkedOrCached(request));\n    return;\n  }\n\n  event.respondWith(cachedOrNetworked(request));\n}\n\nfunction networkedOrCached(request) {\n  return networkedAndCache(request)\n    .catch(() => { return cachedOrOffline(request) });\n}\n\n// Stash response in cache as side-effect of network request\nfunction networkedAndCache(request) {\n  return fetch(request)\n    .then((response) => {\n      var copy = response.clone();\n      caches.open(cacheKey('resources'))\n        .then((cache) => {\n          cache.put(request, copy);\n        });\n\n      log(\"(network: cache write)\", request.method, request.url);\n      return response;\n    });\n}\n\nfunction cachedOrNetworked(request) {\n  return caches.match(request)\n    .then((response) => {\n      log(response ? '(cached)' : '(network: cache miss)', request.method, request.url);\n      return response ||\n        networkedAndCache(request)\n          .catch(() => { return offlineResponse(request) });\n    });\n}\n\nfunction networkedOrOffline(request) {\n  return fetch(request)\n    .then((response) => {\n      log('(network)', request.method, request.url);\n      return response;\n    })\n    .catch(() => {\n      return offlineResponse(request);\n    });\n}\n\nfunction cachedOrOffline(request) {\n  return caches\n    .match(request)\n    .then((response) => {\n      return response || offlineResponse(request);\n    });\n}\n\nfunction offlineResponse(request) {\n  log('(offline)', request.method, request.url);\n  if (request.url.match(/\\.(jpg|png|gif|svg|jpeg)(\\?.*)?$/)) {\n    return caches.match('/offline.svg');\n  } else {\n    return caches.match('/offline.html');\n  }\n}\n\n///////////\n// Activate\n///////////\nfunction onActivate(event) {\n  log('activate event in progress.');\n  event.waitUntil(removeOldCache());\n}\n\nfunction removeOldCache() {\n  return caches\n    .keys()\n    .then((keys) => {\n      return Promise.all( // We return a promise that settles when all outdated caches are deleted.\n        keys\n         .filter((key) => {\n           return !key.startsWith(version); // Filter by keys that don't start with the latest version prefix.\n         })\n         .map((key) => {\n           return caches.delete(key); // Return a promise that's fulfilled when each outdated cache is deleted.\n         })\n      );\n    })\n    .then(() => {\n      log('removeOldCache completed.');\n    });\n}\n\nfunction cacheKey() {\n  return [version, ...arguments].join(':');\n}\n\nfunction log() {\n  if (developmentMode()) {\n    console.log(\"SW:\", ...arguments);\n  }\n}\n\nfunction shouldAlwaysFetch(request) {\n  return __DEVELOPMENT__ ||\n    request.method !== 'GET' ||\n      !matchFetch.some(regex => request.url.match(regex));\n}\n\nfunction shouldFetchAndCache(request) {\n  return ~request.headers.get('Accept').indexOf('text/html');\n}\n\nfunction developmentMode() {\n  return __DEVELOPMENT__ || __DEBUG__;\n}\n\nlog(\"Hello from ServiceWorker land!\", version);\n\nself.addEventListener('install', onInstall);\n\nself.addEventListener('fetch', onFetch);\n\nself.addEventListener(\"activate\", onActivate);\n","date":"2018-10-17T04:37:11.675Z","updated":"2017-06-16T00:26:23.000Z","path":"sw.js","layout":"false","title":"","comments":1,"_id":"cjne8ulnz0000ggvjhqcojw5p","content":"'use strict';\n\nconst version = 'v20170408';\nconst __DEVELOPMENT__ = false;\nconst __DEBUG__ = false;\nconst offlineResources = [\n  '/',\n  '/offline.html',\n  '/offline.svg'\n];\n\nconst matchFetch = [\n  /https?:\\/\\/huaji8.top\\//\n];\n\n\n//////////\n// Install\n//////////\nfunction onInstall(event) {\n  log('install event in progress.');\n\n  event.waitUntil(updateStaticCache());\n}\n\nfunction updateStaticCache() {\n  return caches\n    .open(cacheKey('offline'))\n    .then((cache) => {\n      return cache.addAll(offlineResources);\n    })\n    .then(() => {\n      log('installation complete!');\n    });\n}\n\n////////\n// Fetch\n////////\nfunction onFetch(event) {\n  const request = event.request;\n\n  if (shouldAlwaysFetch(request)) {\n    event.respondWith(networkedOrOffline(request));\n    return;\n  }\n\n  if (shouldFetchAndCache(request)) {\n    event.respondWith(networkedOrCached(request));\n    return;\n  }\n\n  event.respondWith(cachedOrNetworked(request));\n}\n\nfunction networkedOrCached(request) {\n  return networkedAndCache(request)\n    .catch(() => { return cachedOrOffline(request) });\n}\n\n// Stash response in cache as side-effect of network request\nfunction networkedAndCache(request) {\n  return fetch(request)\n    .then((response) => {\n      var copy = response.clone();\n      caches.open(cacheKey('resources'))\n        .then((cache) => {\n          cache.put(request, copy);\n        });\n\n      log(\"(network: cache write)\", request.method, request.url);\n      return response;\n    });\n}\n\nfunction cachedOrNetworked(request) {\n  return caches.match(request)\n    .then((response) => {\n      log(response ? '(cached)' : '(network: cache miss)', request.method, request.url);\n      return response ||\n        networkedAndCache(request)\n          .catch(() => { return offlineResponse(request) });\n    });\n}\n\nfunction networkedOrOffline(request) {\n  return fetch(request)\n    .then((response) => {\n      log('(network)', request.method, request.url);\n      return response;\n    })\n    .catch(() => {\n      return offlineResponse(request);\n    });\n}\n\nfunction cachedOrOffline(request) {\n  return caches\n    .match(request)\n    .then((response) => {\n      return response || offlineResponse(request);\n    });\n}\n\nfunction offlineResponse(request) {\n  log('(offline)', request.method, request.url);\n  if (request.url.match(/\\.(jpg|png|gif|svg|jpeg)(\\?.*)?$/)) {\n    return caches.match('/offline.svg');\n  } else {\n    return caches.match('/offline.html');\n  }\n}\n\n///////////\n// Activate\n///////////\nfunction onActivate(event) {\n  log('activate event in progress.');\n  event.waitUntil(removeOldCache());\n}\n\nfunction removeOldCache() {\n  return caches\n    .keys()\n    .then((keys) => {\n      return Promise.all( // We return a promise that settles when all outdated caches are deleted.\n        keys\n         .filter((key) => {\n           return !key.startsWith(version); // Filter by keys that don't start with the latest version prefix.\n         })\n         .map((key) => {\n           return caches.delete(key); // Return a promise that's fulfilled when each outdated cache is deleted.\n         })\n      );\n    })\n    .then(() => {\n      log('removeOldCache completed.');\n    });\n}\n\nfunction cacheKey() {\n  return [version, ...arguments].join(':');\n}\n\nfunction log() {\n  if (developmentMode()) {\n    console.log(\"SW:\", ...arguments);\n  }\n}\n\nfunction shouldAlwaysFetch(request) {\n  return __DEVELOPMENT__ ||\n    request.method !== 'GET' ||\n      !matchFetch.some(regex => request.url.match(regex));\n}\n\nfunction shouldFetchAndCache(request) {\n  return ~request.headers.get('Accept').indexOf('text/html');\n}\n\nfunction developmentMode() {\n  return __DEVELOPMENT__ || __DEBUG__;\n}\n\nlog(\"Hello from ServiceWorker land!\", version);\n\nself.addEventListener('install', onInstall);\n\nself.addEventListener('fetch', onFetch);\n\nself.addEventListener(\"activate\", onActivate);\n","site":{"data":{}},"excerpt":"","more":"'use strict';\n\nconst version = 'v20170408';\nconst __DEVELOPMENT__ = false;\nconst __DEBUG__ = false;\nconst offlineResources = [\n  '/',\n  '/offline.html',\n  '/offline.svg'\n];\n\nconst matchFetch = [\n  /https?:\\/\\/huaji8.top\\//\n];\n\n\n//////////\n// Install\n//////////\nfunction onInstall(event) {\n  log('install event in progress.');\n\n  event.waitUntil(updateStaticCache());\n}\n\nfunction updateStaticCache() {\n  return caches\n    .open(cacheKey('offline'))\n    .then((cache) => {\n      return cache.addAll(offlineResources);\n    })\n    .then(() => {\n      log('installation complete!');\n    });\n}\n\n////////\n// Fetch\n////////\nfunction onFetch(event) {\n  const request = event.request;\n\n  if (shouldAlwaysFetch(request)) {\n    event.respondWith(networkedOrOffline(request));\n    return;\n  }\n\n  if (shouldFetchAndCache(request)) {\n    event.respondWith(networkedOrCached(request));\n    return;\n  }\n\n  event.respondWith(cachedOrNetworked(request));\n}\n\nfunction networkedOrCached(request) {\n  return networkedAndCache(request)\n    .catch(() => { return cachedOrOffline(request) });\n}\n\n// Stash response in cache as side-effect of network request\nfunction networkedAndCache(request) {\n  return fetch(request)\n    .then((response) => {\n      var copy = response.clone();\n      caches.open(cacheKey('resources'))\n        .then((cache) => {\n          cache.put(request, copy);\n        });\n\n      log(\"(network: cache write)\", request.method, request.url);\n      return response;\n    });\n}\n\nfunction cachedOrNetworked(request) {\n  return caches.match(request)\n    .then((response) => {\n      log(response ? '(cached)' : '(network: cache miss)', request.method, request.url);\n      return response ||\n        networkedAndCache(request)\n          .catch(() => { return offlineResponse(request) });\n    });\n}\n\nfunction networkedOrOffline(request) {\n  return fetch(request)\n    .then((response) => {\n      log('(network)', request.method, request.url);\n      return response;\n    })\n    .catch(() => {\n      return offlineResponse(request);\n    });\n}\n\nfunction cachedOrOffline(request) {\n  return caches\n    .match(request)\n    .then((response) => {\n      return response || offlineResponse(request);\n    });\n}\n\nfunction offlineResponse(request) {\n  log('(offline)', request.method, request.url);\n  if (request.url.match(/\\.(jpg|png|gif|svg|jpeg)(\\?.*)?$/)) {\n    return caches.match('/offline.svg');\n  } else {\n    return caches.match('/offline.html');\n  }\n}\n\n///////////\n// Activate\n///////////\nfunction onActivate(event) {\n  log('activate event in progress.');\n  event.waitUntil(removeOldCache());\n}\n\nfunction removeOldCache() {\n  return caches\n    .keys()\n    .then((keys) => {\n      return Promise.all( // We return a promise that settles when all outdated caches are deleted.\n        keys\n         .filter((key) => {\n           return !key.startsWith(version); // Filter by keys that don't start with the latest version prefix.\n         })\n         .map((key) => {\n           return caches.delete(key); // Return a promise that's fulfilled when each outdated cache is deleted.\n         })\n      );\n    })\n    .then(() => {\n      log('removeOldCache completed.');\n    });\n}\n\nfunction cacheKey() {\n  return [version, ...arguments].join(':');\n}\n\nfunction log() {\n  if (developmentMode()) {\n    console.log(\"SW:\", ...arguments);\n  }\n}\n\nfunction shouldAlwaysFetch(request) {\n  return __DEVELOPMENT__ ||\n    request.method !== 'GET' ||\n      !matchFetch.some(regex => request.url.match(regex));\n}\n\nfunction shouldFetchAndCache(request) {\n  return ~request.headers.get('Accept').indexOf('text/html');\n}\n\nfunction developmentMode() {\n  return __DEVELOPMENT__ || __DEBUG__;\n}\n\nlog(\"Hello from ServiceWorker land!\", version);\n\nself.addEventListener('install', onInstall);\n\nself.addEventListener('fetch', onFetch);\n\nself.addEventListener(\"activate\", onActivate);\n"},{"title":"关于我","date":"2018-10-17T03:58:59.000Z","thumbnail":"/img/二次元/真正的亚瑟王.jpg","layout":"page","toc":false,"background":true,"primarycolor":"cyan","accentcolor":"cyan","_content":"\n#  让自己变的越来越强！\n\nJava后端 程序员 主攻Java EE 、Java Se 、算法\n\n喜欢 **编程**，游戏，**音乐**，**动漫**\n\nQQ：[1157790064](http://wpa.qq.com/msgrd?v=3&uin=1157790064&site=qq&menu=yes)\n\ngithub: [zhengdayday](https://github.com/zhengdayday)\n\n</br>\n\n\n</br>\n\n","source":"关于我.md","raw":"---\ntitle: 关于我\ndate: 2018-10-17 11:58:59\nthumbnail: /img/二次元/真正的亚瑟王.jpg\nlayout: page\ntoc: false\nbackground: true\nprimarycolor: cyan\naccentcolor: cyan\n---\n\n#  让自己变的越来越强！\n\nJava后端 程序员 主攻Java EE 、Java Se 、算法\n\n喜欢 **编程**，游戏，**音乐**，**动漫**\n\nQQ：[1157790064](http://wpa.qq.com/msgrd?v=3&uin=1157790064&site=qq&menu=yes)\n\ngithub: [zhengdayday](https://github.com/zhengdayday)\n\n</br>\n\n\n</br>\n\n","updated":"2018-10-17T07:11:08.505Z","path":"关于我.html","comments":1,"_id":"cjne8ulo20001ggvjac92pb8a","content":"<h1 id=\"让自己变的越来越强！\"><a href=\"#让自己变的越来越强！\" class=\"headerlink\" title=\"让自己变的越来越强！\"></a>让自己变的越来越强！</h1><p>Java后端 程序员 主攻Java EE 、Java Se 、算法</p>\n<p>喜欢 <strong>编程</strong>，游戏，<strong>音乐</strong>，<strong>动漫</strong></p>\n<p>QQ：<a href=\"http://wpa.qq.com/msgrd?v=3&amp;uin=1157790064&amp;site=qq&amp;menu=yes\" target=\"_blank\" rel=\"noopener\">1157790064</a></p>\n<p>github: <a href=\"https://github.com/zhengdayday\" target=\"_blank\" rel=\"noopener\">zhengdayday</a></p>\n<p><br></p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"让自己变的越来越强！\"><a href=\"#让自己变的越来越强！\" class=\"headerlink\" title=\"让自己变的越来越强！\"></a>让自己变的越来越强！</h1><p>Java后端 程序员 主攻Java EE 、Java Se 、算法</p>\n<p>喜欢 <strong>编程</strong>，游戏，<strong>音乐</strong>，<strong>动漫</strong></p>\n<p>QQ：<a href=\"http://wpa.qq.com/msgrd?v=3&amp;uin=1157790064&amp;site=qq&amp;menu=yes\" target=\"_blank\" rel=\"noopener\">1157790064</a></p>\n<p>github: <a href=\"https://github.com/zhengdayday\" target=\"_blank\" rel=\"noopener\">zhengdayday</a></p>\n<p><br></p>\n<p><br></p>\n"},{"title":"关于本站","date":"2018-10-17T01:05:00.000Z","thumbnail":"/img/关于本站/cover.jpg","layout":"page","toc":false,"background":true,"primarycolor":"lightBlue","accentcolor":"lightBlue","_content":"\n我希望它成为一个以技术帖为主的博客。\n\n<br>\n\n友情链接:\n\n### [LiangYongrui](http://www.liangyongrui.com/)\n\n<br>\n\n我喜欢的 blog :\n\n\n<br>\n","source":"关于本站.md","raw":"---\ntitle: 关于本站\ndate: 2018-10-17 09:05:00\nthumbnail: /img/关于本站/cover.jpg\nlayout: page\ntoc: false\nbackground: true\nprimarycolor: lightBlue\naccentcolor: lightBlue\n---\n\n我希望它成为一个以技术帖为主的博客。\n\n<br>\n\n友情链接:\n\n### [LiangYongrui](http://www.liangyongrui.com/)\n\n<br>\n\n我喜欢的 blog :\n\n\n<br>\n","updated":"2018-10-17T07:11:08.498Z","path":"关于本站.html","comments":1,"_id":"cjne8ulo30002ggvjpt85k80q","content":"<p>我希望它成为一个以技术帖为主的博客。</p>\n<p><br></p>\n<p>友情链接:</p>\n<h3 id=\"LiangYongrui\"><a href=\"#LiangYongrui\" class=\"headerlink\" title=\"LiangYongrui\"></a><a href=\"http://www.liangyongrui.com/\" target=\"_blank\" rel=\"noopener\">LiangYongrui</a></h3><p><br></p>\n<p>我喜欢的 blog :</p>\n<p><br></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我希望它成为一个以技术帖为主的博客。</p>\n<p><br></p>\n<p>友情链接:</p>\n<h3 id=\"LiangYongrui\"><a href=\"#LiangYongrui\" class=\"headerlink\" title=\"LiangYongrui\"></a><a href=\"http://www.liangyongrui.com/\" target=\"_blank\" rel=\"noopener\">LiangYongrui</a></h3><p><br></p>\n<p>我喜欢的 blog :</p>\n<p><br></p>\n"},{"layout":"footer","_content":"\n<script>lsloader.load(\"live2d-script\",\"/live2d/script.js?2.0.5\")</script>\n<canvas id=\"live2dcanvas\" width=\"200\" height=\"400\" class=\"live2d\"></canvas>\n<style>\n  #live2dcanvas {\n    position: fixed;\n    right: 0px;\n    z-index: 999;\n    pointer-events: none;\n    bottom: -40px;\n    width: 200px;\n    height: 400px;\n  }\n  @media (max-width: 768px) {\n    #live2dcanvas {\n      width: 150px;\n      height: 300px;\n    }\n  }\n</style>\n<script type=\"text/ls-javascript\" id=\"loadlive2d\">\n//loadlive2d(\"live2dcanvas\" ,\"/public/live2d/assets/z16.model.json\")\n</script>","source":"footer/live2d.html","raw":"layout: 'footer'\n---\n\n<script>lsloader.load(\"live2d-script\",\"/live2d/script.js?2.0.5\")</script>\n<canvas id=\"live2dcanvas\" width=\"200\" height=\"400\" class=\"live2d\"></canvas>\n<style>\n  #live2dcanvas {\n    position: fixed;\n    right: 0px;\n    z-index: 999;\n    pointer-events: none;\n    bottom: -40px;\n    width: 200px;\n    height: 400px;\n  }\n  @media (max-width: 768px) {\n    #live2dcanvas {\n      width: 150px;\n      height: 300px;\n    }\n  }\n</style>\n<script type=\"text/ls-javascript\" id=\"loadlive2d\">\n//loadlive2d(\"live2dcanvas\" ,\"/public/live2d/assets/z16.model.json\")\n</script>","date":"2018-10-17T09:45:48.283Z","updated":"2018-10-17T09:45:48.246Z","path":"footer/live2d.html","title":"","comments":1,"_id":"cjne8ulov0004ggvjl6zyc078","content":"\n<script>lsloader.load(\"live2d-script\",\"/live2d/script.js?2.0.5\")</script>\n<canvas id=\"live2dcanvas\" width=\"200\" height=\"400\" class=\"live2d\"></canvas>\n<style>\n  #live2dcanvas {\n    position: fixed;\n    right: 0px;\n    z-index: 999;\n    pointer-events: none;\n    bottom: -40px;\n    width: 200px;\n    height: 400px;\n  }\n  @media (max-width: 768px) {\n    #live2dcanvas {\n      width: 150px;\n      height: 300px;\n    }\n  }\n</style>\n<script type=\"text/ls-javascript\" id=\"loadlive2d\">\n//loadlive2d(\"live2dcanvas\" ,\"/public/live2d/assets/z16.model.json\")\n</script>","site":{"data":{}},"excerpt":"","more":"\n<script>lsloader.load(\"live2d-script\",\"/live2d/script.js?2.0.5\")</script>\n<canvas id=\"live2dcanvas\" width=\"200\" height=\"400\" class=\"live2d\"></canvas>\n<style>\n  #live2dcanvas {\n    position: fixed;\n    right: 0px;\n    z-index: 999;\n    pointer-events: none;\n    bottom: -40px;\n    width: 200px;\n    height: 400px;\n  }\n  @media (max-width: 768px) {\n    #live2dcanvas {\n      width: 150px;\n      height: 300px;\n    }\n  }\n</style>\n<script type=\"text/ls-javascript\" id=\"loadlive2d\">\n//loadlive2d(\"live2dcanvas\" ,\"/public/live2d/assets/z16.model.json\")\n</script>"},{"layout":"head","_content":"<!-- Piwik -->\n<script type=\"text/javascript\" async>\n  var _paq = _paq || [];\n  /* tracker methods like \"setCustomDimension\" should be called before \"trackPageView\" */\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.huaji8.top/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', '1']);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n</script>\n<!-- End Piwik Code -->","source":"head/piwik.html","raw":"layout: 'head'\n---\n<!-- Piwik -->\n<script type=\"text/javascript\" async>\n  var _paq = _paq || [];\n  /* tracker methods like \"setCustomDimension\" should be called before \"trackPageView\" */\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.huaji8.top/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', '1']);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n</script>\n<!-- End Piwik Code -->","date":"2018-10-18T03:06:07.259Z","updated":"2018-10-18T03:06:07.176Z","path":"head/piwik.html","title":"","comments":1,"_id":"cjne8ulp00006ggvjgovzc1jk","content":"<!-- Piwik -->\n<script type=\"text/javascript\" async>\n  var _paq = _paq || [];\n  /* tracker methods like \"setCustomDimension\" should be called before \"trackPageView\" */\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.huaji8.top/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', '1']);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n</script>\n<!-- End Piwik Code -->","site":{"data":{}},"excerpt":"","more":"<!-- Piwik -->\n<script type=\"text/javascript\" async>\n  var _paq = _paq || [];\n  /* tracker methods like \"setCustomDimension\" should be called before \"trackPageView\" */\n  _paq.push(['trackPageView']);\n  _paq.push(['enableLinkTracking']);\n  (function() {\n    var u=\"//piwik.huaji8.top/\";\n    _paq.push(['setTrackerUrl', u+'piwik.php']);\n    _paq.push(['setSiteId', '1']);\n    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];\n    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);\n  })();\n</script>\n<!-- End Piwik Code -->"}],"Post":[{"title":"Neo4j基础入门","date":"2018-10-18T07:07:08.000Z","thumbnail":"/img/one主题/cover.jpg","primarycolor":"brown","accentcolor":"blueGrey","_content":"\n本篇是学习Neo4j权威指南的第三篇","source":"_posts/Neo4j基础入门.md","raw":"---\ntitle: Neo4j基础入门\ndate: 2018-10-18 15:07:08\ncategories:\n- Neo4j\ntags: \n- 教程\nthumbnail: /img/one主题/cover.jpg\nprimarycolor: brown\naccentcolor: blueGrey\n---\n\n本篇是学习Neo4j权威指南的第三篇","slug":"Neo4j基础入门","published":1,"updated":"2018-10-18T07:08:07.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjne8uloo0003ggvjgbnye6n8","content":"<p>本篇是学习Neo4j权威指南的第三篇</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇是学习Neo4j权威指南的第三篇</p>\n"},{"title":"Neo4j教程","date":"2018-10-17T04:39:29.000Z","thumbnail":"/img/azusa/cover.jpg","primarycolor":"brown","accentcolor":"blueGrey","_content":"\n本篇是学习Neo4j权威指南的第一篇\n\n## 目录\n\n1. [Neo4j概述](http://39.108.125.23/post/Neo4j概述/)\n2. [Neo4j基础入门](http://39.108.125.23/post/Neo4j基础入门/)\n\n## 什么是Neo4j\n\nNeo4j是一种图数据库，以图论为理论根基，擅长处理海量数据之间的复制关系分析。\n\n## 什么是图数据库\n\n图数据库是基于图论实现的一种NoSQL数据库。图论中的点和边，表示图数据库中的节点和关系。\n在图数据库中，数据与数据之间的关系通过节点和关系构成一个图结构并在此结构上实现数据库的所有特性。\n\n## 图数据库的模型\n\n图数据存储常用的有以下三种方式:\n\n* 属性图 (Property Graphs)\n\n* 超图 (Hypergraphs)\n\n* 三元组 (Triples)\n\n## 图的计算引擎\n\n图计算引擎是能够阻止存储大型图数据集并且实现全局图计算算法的一种数据库核心构件。\n\n目前较流行图计算引擎有两种: \n\n* 单机图计算引擎\n\n* 分布式图计算引擎\n    \n所有这些详细介绍将在本系列的下一篇文章 -Neo4j概述中详细介绍\n\n\n\n","source":"_posts/Neo4j教程.md","raw":"---\ntitle: Neo4j教程\ndate: 2018-10-17 12:39:29\ncategories:\n- Neo4j\ntags: \n- 教程\nthumbnail: /img/azusa/cover.jpg\nprimarycolor: brown\naccentcolor: blueGrey\n---\n\n本篇是学习Neo4j权威指南的第一篇\n\n## 目录\n\n1. [Neo4j概述](http://39.108.125.23/post/Neo4j概述/)\n2. [Neo4j基础入门](http://39.108.125.23/post/Neo4j基础入门/)\n\n## 什么是Neo4j\n\nNeo4j是一种图数据库，以图论为理论根基，擅长处理海量数据之间的复制关系分析。\n\n## 什么是图数据库\n\n图数据库是基于图论实现的一种NoSQL数据库。图论中的点和边，表示图数据库中的节点和关系。\n在图数据库中，数据与数据之间的关系通过节点和关系构成一个图结构并在此结构上实现数据库的所有特性。\n\n## 图数据库的模型\n\n图数据存储常用的有以下三种方式:\n\n* 属性图 (Property Graphs)\n\n* 超图 (Hypergraphs)\n\n* 三元组 (Triples)\n\n## 图的计算引擎\n\n图计算引擎是能够阻止存储大型图数据集并且实现全局图计算算法的一种数据库核心构件。\n\n目前较流行图计算引擎有两种: \n\n* 单机图计算引擎\n\n* 分布式图计算引擎\n    \n所有这些详细介绍将在本系列的下一篇文章 -Neo4j概述中详细介绍\n\n\n\n","slug":"Neo4j教程","published":1,"updated":"2018-10-18T07:06:19.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjne8ulox0005ggvjeokk8axc","content":"<p>本篇是学习Neo4j权威指南的第一篇</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"http://39.108.125.23/post/Neo4j概述/\" target=\"_blank\" rel=\"noopener\">Neo4j概述</a></li>\n<li><a href=\"http://39.108.125.23/post/Neo4j基础入门/\" target=\"_blank\" rel=\"noopener\">Neo4j基础入门</a></li>\n</ol>\n<h2 id=\"什么是Neo4j\"><a href=\"#什么是Neo4j\" class=\"headerlink\" title=\"什么是Neo4j\"></a>什么是Neo4j</h2><p>Neo4j是一种图数据库，以图论为理论根基，擅长处理海量数据之间的复制关系分析。</p>\n<h2 id=\"什么是图数据库\"><a href=\"#什么是图数据库\" class=\"headerlink\" title=\"什么是图数据库\"></a>什么是图数据库</h2><p>图数据库是基于图论实现的一种NoSQL数据库。图论中的点和边，表示图数据库中的节点和关系。<br>在图数据库中，数据与数据之间的关系通过节点和关系构成一个图结构并在此结构上实现数据库的所有特性。</p>\n<h2 id=\"图数据库的模型\"><a href=\"#图数据库的模型\" class=\"headerlink\" title=\"图数据库的模型\"></a>图数据库的模型</h2><p>图数据存储常用的有以下三种方式:</p>\n<ul>\n<li><p>属性图 (Property Graphs)</p>\n</li>\n<li><p>超图 (Hypergraphs)</p>\n</li>\n<li><p>三元组 (Triples)</p>\n</li>\n</ul>\n<h2 id=\"图的计算引擎\"><a href=\"#图的计算引擎\" class=\"headerlink\" title=\"图的计算引擎\"></a>图的计算引擎</h2><p>图计算引擎是能够阻止存储大型图数据集并且实现全局图计算算法的一种数据库核心构件。</p>\n<p>目前较流行图计算引擎有两种: </p>\n<ul>\n<li><p>单机图计算引擎</p>\n</li>\n<li><p>分布式图计算引擎</p>\n</li>\n</ul>\n<p>所有这些详细介绍将在本系列的下一篇文章 -Neo4j概述中详细介绍</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇是学习Neo4j权威指南的第一篇</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"http://39.108.125.23/post/Neo4j概述/\" target=\"_blank\" rel=\"noopener\">Neo4j概述</a></li>\n<li><a href=\"http://39.108.125.23/post/Neo4j基础入门/\" target=\"_blank\" rel=\"noopener\">Neo4j基础入门</a></li>\n</ol>\n<h2 id=\"什么是Neo4j\"><a href=\"#什么是Neo4j\" class=\"headerlink\" title=\"什么是Neo4j\"></a>什么是Neo4j</h2><p>Neo4j是一种图数据库，以图论为理论根基，擅长处理海量数据之间的复制关系分析。</p>\n<h2 id=\"什么是图数据库\"><a href=\"#什么是图数据库\" class=\"headerlink\" title=\"什么是图数据库\"></a>什么是图数据库</h2><p>图数据库是基于图论实现的一种NoSQL数据库。图论中的点和边，表示图数据库中的节点和关系。<br>在图数据库中，数据与数据之间的关系通过节点和关系构成一个图结构并在此结构上实现数据库的所有特性。</p>\n<h2 id=\"图数据库的模型\"><a href=\"#图数据库的模型\" class=\"headerlink\" title=\"图数据库的模型\"></a>图数据库的模型</h2><p>图数据存储常用的有以下三种方式:</p>\n<ul>\n<li><p>属性图 (Property Graphs)</p>\n</li>\n<li><p>超图 (Hypergraphs)</p>\n</li>\n<li><p>三元组 (Triples)</p>\n</li>\n</ul>\n<h2 id=\"图的计算引擎\"><a href=\"#图的计算引擎\" class=\"headerlink\" title=\"图的计算引擎\"></a>图的计算引擎</h2><p>图计算引擎是能够阻止存储大型图数据集并且实现全局图计算算法的一种数据库核心构件。</p>\n<p>目前较流行图计算引擎有两种: </p>\n<ul>\n<li><p>单机图计算引擎</p>\n</li>\n<li><p>分布式图计算引擎</p>\n</li>\n</ul>\n<p>所有这些详细介绍将在本系列的下一篇文章 -Neo4j概述中详细介绍</p>\n"},{"title":"Neo4j概述","date":"2018-10-18T02:43:20.000Z","thumbnail":"/img/Neo4j/cover.jpg","primarycolor":"brown","accentcolor":"blueGrey","_content":"\n本篇是学习Neo4j权威指南的第二篇\n\n## Neo4j概述\n\nNeo4j是由Java实现的开源的NoSQL图数据库\n\n## 免索引邻接\n\n* 用来保证关系查询的速度，数据库中的每个节点都会维护与它相邻节点的引用。\n\n* 每个节点都相当于与他相邻节点的微索引。\n\n* 查询时间和图的整体规模无关，只与它附近节点的数量成正比。\n\n* 使用遍历物理关系的方法查找。查询一个索引的时间复杂度为`O(n)`，遍历物理关系的时间复杂度为`O(1)`。\n\n* 索引建立后，反向遍历索引会导致索引无效，可以通过暴力搜索的时间复杂度为`O(log(n))`或者创建反向查找索引。\n\n## Neo4j底层存储结构\n\n* 节点，类似于E-R图中的Entity，节点可以有多个属性，以key-value的形式存在。节点还具有标签(Label)，用来区分不同类型的节点。\n\n* 关系，类似于E-R图中的Ralationsip。一个关系有起始节点和终止节点。节点也可以有属性和标签。\n\n## Neo4j的遍历方式\n\n* 属性是单向链表\n\n* 关系是双向链表\n\n\n## Neo4j的存储优化\n\nNeo4j通过压缩和内联存储属性值，短字符的属性可以直接存储，复杂字符可以直接内联到属性存储文件，而不是单独放在另一个动态存储区。\n\nNeo4j采用的缓存策略是最不经常使用的页置换`(LFU,Least, Frequently Used)`缓存策略。\n\n本系列的下一篇文章 - Neo4基础入门\n","source":"_posts/Neo4j概述.md","raw":"---\ntitle: Neo4j概述\ndate: 2018-10-18 10:43:20\ncategories:\n- Neo4j\ntags: \n- 教程\nthumbnail: /img/Neo4j/cover.jpg\nprimarycolor: brown\naccentcolor: blueGrey\n---\n\n本篇是学习Neo4j权威指南的第二篇\n\n## Neo4j概述\n\nNeo4j是由Java实现的开源的NoSQL图数据库\n\n## 免索引邻接\n\n* 用来保证关系查询的速度，数据库中的每个节点都会维护与它相邻节点的引用。\n\n* 每个节点都相当于与他相邻节点的微索引。\n\n* 查询时间和图的整体规模无关，只与它附近节点的数量成正比。\n\n* 使用遍历物理关系的方法查找。查询一个索引的时间复杂度为`O(n)`，遍历物理关系的时间复杂度为`O(1)`。\n\n* 索引建立后，反向遍历索引会导致索引无效，可以通过暴力搜索的时间复杂度为`O(log(n))`或者创建反向查找索引。\n\n## Neo4j底层存储结构\n\n* 节点，类似于E-R图中的Entity，节点可以有多个属性，以key-value的形式存在。节点还具有标签(Label)，用来区分不同类型的节点。\n\n* 关系，类似于E-R图中的Ralationsip。一个关系有起始节点和终止节点。节点也可以有属性和标签。\n\n## Neo4j的遍历方式\n\n* 属性是单向链表\n\n* 关系是双向链表\n\n\n## Neo4j的存储优化\n\nNeo4j通过压缩和内联存储属性值，短字符的属性可以直接存储，复杂字符可以直接内联到属性存储文件，而不是单独放在另一个动态存储区。\n\nNeo4j采用的缓存策略是最不经常使用的页置换`(LFU,Least, Frequently Used)`缓存策略。\n\n本系列的下一篇文章 - Neo4基础入门\n","slug":"Neo4j概述","published":1,"updated":"2018-10-18T07:06:45.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjne8ulpd0009ggvj0p1swplg","content":"<p>本篇是学习Neo4j权威指南的第二篇</p>\n<h2 id=\"Neo4j概述\"><a href=\"#Neo4j概述\" class=\"headerlink\" title=\"Neo4j概述\"></a>Neo4j概述</h2><p>Neo4j是由Java实现的开源的NoSQL图数据库</p>\n<h2 id=\"免索引邻接\"><a href=\"#免索引邻接\" class=\"headerlink\" title=\"免索引邻接\"></a>免索引邻接</h2><ul>\n<li><p>用来保证关系查询的速度，数据库中的每个节点都会维护与它相邻节点的引用。</p>\n</li>\n<li><p>每个节点都相当于与他相邻节点的微索引。</p>\n</li>\n<li><p>查询时间和图的整体规模无关，只与它附近节点的数量成正比。</p>\n</li>\n<li><p>使用遍历物理关系的方法查找。查询一个索引的时间复杂度为<code>O(n)</code>，遍历物理关系的时间复杂度为<code>O(1)</code>。</p>\n</li>\n<li><p>索引建立后，反向遍历索引会导致索引无效，可以通过暴力搜索的时间复杂度为<code>O(log(n))</code>或者创建反向查找索引。</p>\n</li>\n</ul>\n<h2 id=\"Neo4j底层存储结构\"><a href=\"#Neo4j底层存储结构\" class=\"headerlink\" title=\"Neo4j底层存储结构\"></a>Neo4j底层存储结构</h2><ul>\n<li><p>节点，类似于E-R图中的Entity，节点可以有多个属性，以key-value的形式存在。节点还具有标签(Label)，用来区分不同类型的节点。</p>\n</li>\n<li><p>关系，类似于E-R图中的Ralationsip。一个关系有起始节点和终止节点。节点也可以有属性和标签。</p>\n</li>\n</ul>\n<h2 id=\"Neo4j的遍历方式\"><a href=\"#Neo4j的遍历方式\" class=\"headerlink\" title=\"Neo4j的遍历方式\"></a>Neo4j的遍历方式</h2><ul>\n<li><p>属性是单向链表</p>\n</li>\n<li><p>关系是双向链表</p>\n</li>\n</ul>\n<h2 id=\"Neo4j的存储优化\"><a href=\"#Neo4j的存储优化\" class=\"headerlink\" title=\"Neo4j的存储优化\"></a>Neo4j的存储优化</h2><p>Neo4j通过压缩和内联存储属性值，短字符的属性可以直接存储，复杂字符可以直接内联到属性存储文件，而不是单独放在另一个动态存储区。</p>\n<p>Neo4j采用的缓存策略是最不经常使用的页置换<code>(LFU,Least, Frequently Used)</code>缓存策略。</p>\n<p>本系列的下一篇文章 - Neo4基础入门</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇是学习Neo4j权威指南的第二篇</p>\n<h2 id=\"Neo4j概述\"><a href=\"#Neo4j概述\" class=\"headerlink\" title=\"Neo4j概述\"></a>Neo4j概述</h2><p>Neo4j是由Java实现的开源的NoSQL图数据库</p>\n<h2 id=\"免索引邻接\"><a href=\"#免索引邻接\" class=\"headerlink\" title=\"免索引邻接\"></a>免索引邻接</h2><ul>\n<li><p>用来保证关系查询的速度，数据库中的每个节点都会维护与它相邻节点的引用。</p>\n</li>\n<li><p>每个节点都相当于与他相邻节点的微索引。</p>\n</li>\n<li><p>查询时间和图的整体规模无关，只与它附近节点的数量成正比。</p>\n</li>\n<li><p>使用遍历物理关系的方法查找。查询一个索引的时间复杂度为<code>O(n)</code>，遍历物理关系的时间复杂度为<code>O(1)</code>。</p>\n</li>\n<li><p>索引建立后，反向遍历索引会导致索引无效，可以通过暴力搜索的时间复杂度为<code>O(log(n))</code>或者创建反向查找索引。</p>\n</li>\n</ul>\n<h2 id=\"Neo4j底层存储结构\"><a href=\"#Neo4j底层存储结构\" class=\"headerlink\" title=\"Neo4j底层存储结构\"></a>Neo4j底层存储结构</h2><ul>\n<li><p>节点，类似于E-R图中的Entity，节点可以有多个属性，以key-value的形式存在。节点还具有标签(Label)，用来区分不同类型的节点。</p>\n</li>\n<li><p>关系，类似于E-R图中的Ralationsip。一个关系有起始节点和终止节点。节点也可以有属性和标签。</p>\n</li>\n</ul>\n<h2 id=\"Neo4j的遍历方式\"><a href=\"#Neo4j的遍历方式\" class=\"headerlink\" title=\"Neo4j的遍历方式\"></a>Neo4j的遍历方式</h2><ul>\n<li><p>属性是单向链表</p>\n</li>\n<li><p>关系是双向链表</p>\n</li>\n</ul>\n<h2 id=\"Neo4j的存储优化\"><a href=\"#Neo4j的存储优化\" class=\"headerlink\" title=\"Neo4j的存储优化\"></a>Neo4j的存储优化</h2><p>Neo4j通过压缩和内联存储属性值，短字符的属性可以直接存储，复杂字符可以直接内联到属性存储文件，而不是单独放在另一个动态存储区。</p>\n<p>Neo4j采用的缓存策略是最不经常使用的页置换<code>(LFU,Least, Frequently Used)</code>缓存策略。</p>\n<p>本系列的下一篇文章 - Neo4基础入门</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjne8uloo0003ggvjgbnye6n8","category_id":"cjne8ulpa0007ggvjt2pf2tcl","_id":"cjne8ulpm000eggvje51shzqt"},{"post_id":"cjne8ulox0005ggvjeokk8axc","category_id":"cjne8ulpa0007ggvjt2pf2tcl","_id":"cjne8ulpp000hggvjgxisouyn"},{"post_id":"cjne8ulpd0009ggvj0p1swplg","category_id":"cjne8ulpa0007ggvjt2pf2tcl","_id":"cjne8ulpq000jggvjlr64du90"}],"PostTag":[{"post_id":"cjne8uloo0003ggvjgbnye6n8","tag_id":"cjne8ulpd0008ggvju1681tlt","_id":"cjne8ulpj000cggvj94wfchtr"},{"post_id":"cjne8ulox0005ggvjeokk8axc","tag_id":"cjne8ulpd0008ggvju1681tlt","_id":"cjne8ulpn000gggvjcu0e66fv"},{"post_id":"cjne8ulpd0009ggvj0p1swplg","tag_id":"cjne8ulpd0008ggvju1681tlt","_id":"cjne8ulpp000iggvjuosdt356"}],"Tag":[{"name":"教程","_id":"cjne8ulpd0008ggvju1681tlt"}]}}